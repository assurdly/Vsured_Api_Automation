{
	"info": {
		"_postman_id": "a536e47d-3595-469d-b1ca-cc4d4af5b41a",
		"name": "Vsured-QA",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register-Successful",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status returns Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Successfully registered user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully registered user\");\r",
											"});\r",
											"pm.test(\"Verify that data exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.exist;\r",
											"});\r",
											"pm.test('Set phone', ()=>{\r",
											"    var jsonData = pm.response.json()\r",
											"    pm.collectionVariables.set('phoneNumber', jsonData.data.Phone)\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "95f8bdbc-0986-4f44-8f82-46b126381fad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register- Already registered PhoneNo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c365ae68-ba45-4c4e-b96c-98a4f62eaa27",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that status returns failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that message returns User with this Phone already exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"User with this Phone number already exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fca3d779-f1f6-4c29-bcd1-590946b30c98",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "Abiodun",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "Olaniyi",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "08057231914",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "2222222",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "alex@gmail",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty First name field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns FirstName is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"FirstName is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns FirstName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"FirstName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4d6421f9-feb7-46ba-8285-c035c5cd89df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Last Name Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns LastName is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"LastName is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns LastName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"LastName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7ad7d9b6-0b11-4b2a-a62d-0aeb5bbeacab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Gender Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Gender is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Gender is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Gender\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Gender\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52940e17-f640-4b57-913f-4b9b3e6d6292",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Address Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Address is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Address is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Address\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9c8d4a53-3089-4ec9-9071-8d95ef1fd6e5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Phone number Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns PhoneNumber is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"PhoneNumber is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Phone\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Phone\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "67a7a6f4-2b9f-43ea-ba26-cbdfeb54c8bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Invalid Phone number Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns PhoneNumber is invalid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"PhoneNumber is invalid\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Phone\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Phone\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "59a67759-96cd-422f-8d30-10e826af84da",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Password Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Password is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Password is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "65675bc1-970b-4011-87b7-c7c28cfa5ed1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Language Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Language is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Language is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Language\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Language\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "41e729b6-28b6-45ba-85f9-93a6372a8bec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Date of Birth Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Date of Birth is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Date of Birth is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns DOB\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"DOB\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "240de9dc-d1bd-4e09-aa20-20b43646cdd7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty Email field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status returns Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Successfully registered user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully registered user\");\r",
											"});\r",
											"pm.test(\"Verify that data exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "df676ec0-57fc-40f4-b7ba-8fc1b9dfb6f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Invalid Email format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Email is invalid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Email is invalid\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Email\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Email\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aed0b408-9f07-4d66-b515-14b81f8808e1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12yopmailcom",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "COMMUNITY_ADMIN",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Empty UserRole Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Please Pass the User Role\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Please Pass the User Role\");\r",
											"});\r",
											"pm.test(\"Verify that path returns UserRole\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"UserRole\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4de74b20-d2d9-4244-9d7c-994ba3331a58",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						},
						{
							"name": "Register-Invalid User Role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab85f89b-439e-49dd-b04c-cea107c111bf",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de9bc1e4-e4a8-40db-bea6-6fafdc0c8e5e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that response status returns failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Invalid role passed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid role passed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0d2148c6-96af-4af2-adc9-5fece7d27e6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eec0465-4bc1-44c0-b159-68c4676ec721"
										},
										{
											"key": "FirstName",
											"value": "{{$randomFirstName}}",
											"type": "text"
										},
										{
											"key": "LastName",
											"value": "{{$randomLastName}}",
											"type": "text"
										},
										{
											"key": "Gender",
											"value": "Male",
											"type": "text"
										},
										{
											"key": "Address",
											"value": "testing address",
											"type": "text"
										},
										{
											"key": "Phone",
											"value": "{{phoneNumber}}",
											"type": "text"
										},
										{
											"key": "Password",
											"value": "Password@12",
											"type": "text"
										},
										{
											"key": "Language",
											"value": "English",
											"type": "text"
										},
										{
											"key": "CompanyType",
											"value": "Finance",
											"type": "text"
										},
										{
											"key": "DOB",
											"value": "1993-01-01",
											"type": "text"
										},
										{
											"key": "Email",
											"value": "{{$randomFirstName}}12@yopmail.com",
											"type": "text"
										},
										{
											"key": "UserRole",
											"value": "XXXXXXXXXX",
											"type": "text"
										}
									]
								},
								"url": "{{BaseUrl}}/api/register"
							},
							"response": []
						}
					],
					"id": "f6df7584-c312-4ec4-a941-04e4fe0edf12"
				},
				{
					"name": "Send OTP to Registered Email",
					"item": [
						{
							"name": "Send OTP to RegIstered Email- Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1224bb6d-22be-4a70-abb0-f0c38ae21ded",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status returns Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Token sent Successfully \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Token sent successfully Via SMS\");\r",
											"});\r",
											"pm.test(\"Verify that response Channel gets phoneNumber\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.Channel).to.eql(pm.collectionVariables.get('phoneNumber'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6f8ba969-7799-42ce-818f-738b4a160df9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"{{phoneNumber}}\",\n    \"Medium\":\"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/sendMail"
							},
							"response": []
						},
						{
							"name": "Send OTP to RegIstered Email- Empty channel field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42d5e0b0-0e34-41e9-bd42-12404cc83f22",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Channel is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Channel is required. In the form of Email or phone number\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Channel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "58d64fb9-433b-4c27-947d-ad5a1c86b9d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"\",\n    \"Medium\":\"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/sendMail"
							},
							"response": []
						},
						{
							"name": "Send OTP to RegIstered Email- Empty Medium Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b7f6dc0-5f80-4817-96dd-df458db84e1c",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Medium is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Medium is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Medium\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Medium\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "04b0e864-532a-443c-86e9-3b373977f9b1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"Medium\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/sendMail"
							},
							"response": []
						},
						{
							"name": "Send OTP to RegIstered Email-Invalid Channel details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1224bb6d-22be-4a70-abb0-f0c38ae21ded",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Channel is invalid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Channel is invalid\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Email\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "276d8a28-aaaa-40b6-a001-7585c484509e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"abgjlout\",\n    \"Medium\":\"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/sendMail"
							},
							"response": []
						}
					],
					"id": "bc942820-b825-4801-a8e7-4bf43d410152"
				},
				{
					"name": "Registration Verification",
					"item": [
						{
							"name": "Registeration Verification- Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1146c268-df38-45aa-ac9e-e418bff298f2",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that response status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Email Verification Successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email Verification Successful, please proceed to login\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b357f4ee-ed72-47c7-9162-149936de3d43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"{{phoneNumber}}\",\n    \"Token\":\"000000\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/verify"
							},
							"response": []
						},
						{
							"name": "Registeration Verification- Empty Channel field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4275625d-a8b9-4935-9878-136f03221bb5",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Channel is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Channel is required. In the form of Email or phone number\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Channel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e3694384-72f3-4899-98c1-54d8ac8e1d6e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"\",\n    \"Token\":\"515774\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/verify"
							},
							"response": []
						},
						{
							"name": "Registeration Verification- Empty Token field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2511c0b-2999-42cb-9ae0-03761df2295c",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Token is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Token is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "95df5dd0-bf05-4cdd-8975-80ca5c2d4dc7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"Token\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/verify"
							},
							"response": []
						},
						{
							"name": "Registeration Verification- Invalid Channel details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1146c268-df38-45aa-ac9e-e418bff298f2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8ac625cf-9ab5-4968-826d-2f893fbbcc13",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"{{$randomFirstName}}\",\n    \"Token\":\"000000\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/verify"
							},
							"response": []
						},
						{
							"name": "Registeration Verification- Token with alphabets and special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1146c268-df38-45aa-ac9e-e418bff298f2",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that response status returns failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Email Verification failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email Verification Failed, Please try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52c273e6-d03e-4dc8-bdb3-5019bd86a1ee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"{{phoneNumber}}\",\n    \"Token\":\"abc!@#\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/verify"
							},
							"response": []
						},
						{
							"name": "Registeration Verification- Wrong/Expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1146c268-df38-45aa-ac9e-e418bff298f2",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that response status returns failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Email Verification failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email Verification Failed, Please try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cb2b1b20-3755-47e7-b199-e88f67cce56d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"{{phoneNumber}}\",\n    \"Token\":\"135706\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/register/verify"
							},
							"response": []
						}
					],
					"id": "fdc6ce19-ef31-43fe-80f6-4e4342979d66"
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7fedcc3d-d0f0-4dc5-8000-80ca6a79013c",
										"exec": [
											"// Assuming the login response has the access token in the 'token' field",
											"//const jsonResponse = pm.response.json();",
											"//const accessToken = jsonResponse.accessToken;",
											"",
											"// Set the access token in the environment variable",
											"//pm.environment.set('accessToken', accessToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25d06d73-a84e-4d0e-8de6-1daca6e7efdb",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that Status is Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Login successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Login Successful\");\r",
											"});\r",
											"pm.test(\"Set signin token value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"Auth_token\", jsonData.accessToken);    \r",
											"});\r",
											"pm.test(\"Set signin refresh token value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"Refresh_token\", jsonData.refreshToken);    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "00f52749-72cd-4e95-91a6-6444bc3ac3a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"Password\":\"111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/login"
							},
							"response": []
						},
						{
							"name": "Login- Empty Channel field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7fedcc3d-d0f0-4dc5-8000-80ca6a79013c",
										"exec": [
											"// Assuming the login response has the access token in the 'token' field",
											"//const jsonResponse = pm.response.json();",
											"//const accessToken = jsonResponse.accessToken;",
											"",
											"// Set the access token in the environment variable",
											"//pm.environment.set('accessToken', accessToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73b56fa5-b7c0-4dcb-a09c-61e0f9e4514e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Channel is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Channel is required. In the form of Email or phone number\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Channel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "792bd6e1-c16e-4a28-a273-4444b9713d99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"\",\n    \"Password\":\"111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/login"
							},
							"response": []
						},
						{
							"name": "Login- Empty Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7fedcc3d-d0f0-4dc5-8000-80ca6a79013c",
										"exec": [
											"// Assuming the login response has the access token in the 'token' field",
											"//const jsonResponse = pm.response.json();",
											"//const accessToken = jsonResponse.accessToken;",
											"",
											"// Set the access token in the environment variable",
											"//pm.environment.set('accessToken', accessToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a38b4d9-e78d-4d63-8a1a-2041775ee79e",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Password is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Password is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "de68b73b-23f7-4530-9f19-413cef0ba378",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"Password\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/login"
							},
							"response": []
						},
						{
							"name": "Login- Wrong channel and correct password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7fedcc3d-d0f0-4dc5-8000-80ca6a79013c",
										"exec": [
											"// Assuming the login response has the access token in the 'token' field",
											"//const jsonResponse = pm.response.json();",
											"//const accessToken = jsonResponse.accessToken;",
											"",
											"// Set the access token in the environment variable",
											"//pm.environment.set('accessToken', accessToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25d06d73-a84e-4d0e-8de6-1daca6e7efdb",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that Status is Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes invalid phone number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"invalid Phone Number or Password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "057f45fa-2eaf-4f50-9212-7e025de3ac83",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145011789\",\n    \"Password\":\"111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/login"
							},
							"response": []
						},
						{
							"name": "Login-Correct password and Wrong Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7fedcc3d-d0f0-4dc5-8000-80ca6a79013c",
										"exec": [
											"// Assuming the login response has the access token in the 'token' field",
											"//const jsonResponse = pm.response.json();",
											"//const accessToken = jsonResponse.accessToken;",
											"",
											"// Set the access token in the environment variable",
											"//pm.environment.set('accessToken', accessToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25d06d73-a84e-4d0e-8de6-1daca6e7efdb",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that Status is Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Invalid Login Credentials\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid Login Credentials\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5e4562dd-ea40-4935-9ddc-6c8729359cde",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"Password\":\"232323\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/login"
							},
							"response": []
						}
					],
					"id": "38bfc21f-48df-432a-a92e-92e9da9de63c"
				},
				{
					"name": "Refresh Token",
					"item": [
						{
							"name": "RefreshToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4525cffd-3b5e-48ad-b52c-84ee7b624abd",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that message returns token generated successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Token Generated Successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9158e28c-57a3-41e8-aba6-3e3f6d3bccdd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"RefreshToken\":\"{{Refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/refreshToken"
							},
							"response": []
						},
						{
							"name": "RefreshToken- Empty channel field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7217300b-c242-47cf-85c7-2a9f1a3ea97f",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Channel is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Channel is required. In the form of Email or phone number\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Channel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0a262ca0-9a82-4ce2-a1bd-187dbbff5c34",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"\",\n    \"RefreshToken\":\"{{Refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/refreshToken"
							},
							"response": []
						},
						{
							"name": "RefreshToken- Empty RefreshToken field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72c2e00d-8a87-441c-8bbe-1df41abacee0",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns RefreshToken is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"RefreshToken is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns RefreshToken\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"RefreshToken\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3cadd822-5629-4365-90dc-fbb285f51a88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"RefreshToken\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/refreshToken"
							},
							"response": []
						},
						{
							"name": "RefreshToken- Wrong Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4525cffd-3b5e-48ad-b52c-84ee7b624abd",
										"exec": [
											"pm.test(\"Verify that Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Verify that status returns status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that message returns UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"UnAuthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "caa52952-7279-42b3-ab56-93f13da22bf4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"RefreshToken\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoianVzdCBhIHJlZnJlc2ggdG9rZW4rhuJpYXQiOjE3MDgwOTEzMDEsImV4cCI6MTcwODY5NjEwMX0.muTp74DEs79tJvLH9aLNCCEvby2lQcoHpbzEBOSvp7E\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/refreshToken"
							},
							"response": []
						},
						{
							"name": "RefreshToken-No Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4525cffd-3b5e-48ad-b52c-84ee7b624abd",
										"exec": [
											"pm.test(\"Verify that Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Verify that status returns status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that message returns UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request UnAuthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8623fc38-a33e-4c8a-a9ea-78a1d48b06e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"RefreshToken\":\"{{Refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/refreshToken"
							},
							"response": []
						},
						{
							"name": "RefreshToken-Invalid Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4525cffd-3b5e-48ad-b52c-84ee7b624abd",
										"exec": [
											"pm.test(\"Verify that Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Request UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request Forbidden, Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "51706fdb-5d98-45f3-b56e-88134f8c930c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{accessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"RefreshToken\":\"{{Refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/refreshToken"
							},
							"response": []
						}
					],
					"id": "7b7a391b-b939-4a07-9d2f-1d5b0b810bde"
				},
				{
					"name": "Send Email-Forgot Password",
					"item": [
						{
							"name": "Send OTP for ForgotPassword-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41ed81f1-62c6-473a-952a-b84ad457bea5",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that response status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Email Sent Successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email Sent Successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d0e2010-5536-4661-84d8-aea5fcac2231",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"{{phoneNumber}}\",\n    \"DOB\":\"1993-01-01\",\n    \"Medium\":\"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/sendMail"
							},
							"response": []
						},
						{
							"name": "Send OTP for ForgotPassword- Empty Channel field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed60f2c4-98e1-40fd-89ef-32de21a50e2a",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Channel is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Channel is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Channel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d79c5c29-9c17-4cd8-98b6-b3d59a021878",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"\",\n    \"DOB\":\"1993-01-01\",\n    \"Medium\":\"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/sendMail"
							},
							"response": []
						},
						{
							"name": "Send OTP for ForgotPassword- Empty DOB field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b302a46-712c-4cbf-b33b-077f5f02ab65",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Must be date format\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Must be date format\");\r",
											"});\r",
											"pm.test(\"Verify that path returns DOB\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"DOB\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "621f80d4-f914-448c-8d6c-5500c2d2424b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"DOB\":\"\",\n    \"Medium\":\"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/sendMail"
							},
							"response": []
						},
						{
							"name": "Send OTP for ForgotPassword- Empty Medium field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57e4e6d5-5293-4031-b556-44066e1eaacc",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message equals Medium is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Medium is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Medium\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Medium\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52ed9354-b56f-41b3-a1be-6bc744da3af8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"DOB\":\"1993-01-01\",\n    \"Medium\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/sendMail"
							},
							"response": []
						}
					],
					"id": "3076b2bf-f34e-4252-a86e-ea386f103bef"
				},
				{
					"name": "Forgot Password Verification",
					"item": [
						{
							"name": "Verify Forgot Password- Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ae3b31c-ce3e-40a6-b32f-5b019a4778c9",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that response status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Email Verification Successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email Verification Successful, please proceed to login\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bf412eeb-e6f2-4e81-acd5-d00d32d3745c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\": \"{{phoneNumber}}\",\n    \"Token\": \"000000\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/verify"
							},
							"response": []
						},
						{
							"name": "Verify Forgot Password- Empty Channel field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5780638-17fa-40c5-8ed9-f2182fc3cc0d",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Channel is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Channel is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Channel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "237f8c84-2e58-48ac-b990-b68d519ed21e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"\",\n    \"Token\":\"127624\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/verify"
							},
							"response": []
						},
						{
							"name": "Verify Forgot Password- Empty Token field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "315535b2-2f4b-445b-a8e6-aa7033536252",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Token is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Token is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aea9086c-030d-4451-b201-3f704274cd4e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\":\"08145075789\",\n    \"Token\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/verify"
							},
							"response": []
						},
						{
							"name": "Verify Forgot Password- Wrong Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ae3b31c-ce3e-40a6-b32f-5b019a4778c9",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that response status returns failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Email Verification Successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email Verification Failed, Please try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a231309e-4ecf-41a0-b524-2a8c1bbd7fe3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\": \"{{phoneNumber}}\",\n    \"Token\": \"569876\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/verify"
							},
							"response": []
						},
						{
							"name": "Verify Forgot Password-Token with Alphabets and Special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ae3b31c-ce3e-40a6-b32f-5b019a4778c9",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that response status returns failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Email Verification Successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Email Verification Failed, Please try again\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "caca5611-f93a-4c98-9212-7386b2224c04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Channel\": \"{{phoneNumber}}\",\n    \"Token\": \"abcd@#\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/forgotPassword/verify"
							},
							"response": []
						}
					],
					"id": "f8b25411-e320-487d-a9f9-734e12dcfade"
				},
				{
					"name": "Reset Password",
					"item": [
						{
							"name": "ResetPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee64a9a8-e70f-4060-9a66-789de51448c7",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that response status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message includes Password Reset Successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Password Reset Successful, Please proceed to login\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e024c2e6-86a8-4a03-9d20-7aba5f2ee26e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"NewPassword\":\"Tester@12\",\n\"ConfirmPassword\":\"Tester@12\",\n\"Channel\":\"{{phoneNumber}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/resetPassword"
							},
							"response": []
						},
						{
							"name": "ResetPassword-Empty new password field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82a2b51f-cd8a-495a-a73e-f4e093b87440",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns NewPassword is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"NewPassword is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns NewPassword\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"NewPassword\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7aef3302-603d-45e4-9681-0ffa062e2e95",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"NewPassword\":\"\",\n\"ConfirmPassword\":\"111111\",\n\"Channel\":\"08145075789\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/resetPassword"
							},
							"response": []
						},
						{
							"name": "ResetPassword- Empty Confirm Password field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7195d3d9-c960-40a4-a72d-03738e039b66",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns ConfirmPassword is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"ConfirmPassword is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns NewPassword\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"ConfirmPassword\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "197612c0-6218-4620-b4f4-e80abfcdd07a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"NewPassword\":\"111111\",\n\"ConfirmPassword\":\"\",\n\"Channel\":\"08145075789\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/resetPassword"
							},
							"response": []
						},
						{
							"name": "ResetPassword-Empty Channel field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "634bbfc6-35d3-413d-b8dd-c1dde618cdce",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message includes Channel is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Channel is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Channel\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Channel\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1d859457-8173-43b7-bd50-9fe5193b48b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"NewPassword\":\"111111\",\n\"ConfirmPassword\":\"111111\",\n\"Channel\":\"\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/resetPassword"
							},
							"response": []
						},
						{
							"name": "ResetPassword-Mismatched newPassword and confirmPassword field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01507179-258f-4ecd-aef0-8fb2adc6c42f",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Password and Confirm Password must match\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.include(\"Password and Confirm Password must match\");\r",
											"});\r",
											"pm.test(\"Verify that path returns ConfirmPassword\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"ConfirmPassword\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ee86e3f4-4f92-4742-b30b-80f85989e161",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"NewPassword\":\"111111\",\n\"ConfirmPassword\":\"222222\",\n\"Channel\":\"08145075789\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/resetPassword"
							},
							"response": []
						}
					],
					"id": "b8d89853-e39e-4171-ae1f-73720ad97fe5"
				}
			],
			"id": "39fee73c-c067-4a53-91fb-92fdddd51eb4"
		},
		{
			"name": "Community",
			"item": [
				{
					"name": "CreateCommunity",
					"item": [
						{
							"name": "CreateCommunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3b183ba-564a-4601-9b83-f0a7599e810d",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "283c1abb-2565-4f1d-ae8f-a01ca5744d76",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that response status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Successfully created commununity\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully Created Community\");\r",
											"});\r",
											"pm.test(\"Verify that response name exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Name).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response Address exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Address).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response phone exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Phone).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response Email exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Email).to.exist;\r",
											"});\r",
											"pm.test(\"Get Community id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set('commununityId', jsonData.data.CommunityId)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "72af0526-7892-4b0a-b011-73fe4a968e0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"{{$randomFirstName}}\",\n        \"Address\":\"{{$randomStreetAddress}}\",\n        \"Phone\":\"{{phoneNumber}}\",\n        \"Email\":\"{{$randomFirstName}}{{$randomLastName}}@yopmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "Create Community-Empty name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aeed5e20-9c28-46e6-99a9-d2c93fb4d50f",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Name is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Name is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f8f45c9c-2459-4585-bb76-694a84d576f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"\",\n        \"Address\":\"test address 2\",\n        \"Phone\":\"08093781185\",\n        \"Email\":\"alexanderprofesssor@gmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "Create Community-Empty Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d337106a-1e7e-4af8-9c8f-5f24f140fd8c",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Address is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Address is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Address\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fbb086c3-93cc-4648-82c4-3427246b0fae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"Test Community 2\",\n        \"Address\":\"\",\n        \"Phone\":\"08093781185\",\n        \"Email\":\"alexanderprofesssor@gmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "CreateCommunity-Empty Phone number field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "292f28f2-f5b7-4914-b8a2-0d1552de965a",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Phone is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Phone is required\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Phone\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Phone\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b328c635-8f6e-403e-b651-6a41e99bb523",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"Test Community 2\",\n        \"Address\":\"test address 2\",\n        \"Phone\":\"\",\n        \"Email\":\"alexanderprofesssor@gmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "CreateCommunity(NM)-Empty email field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a80f289-406c-4c46-b3c8-88e9aabe2b37",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that response status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Successfully created commununity\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully Created Community\");\r",
											"});\r",
											"pm.test(\"Verify that response name exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Name).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response Address exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Address).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response phone exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Phone).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response Email exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Email).to.exist;\r",
											"});\r",
											"pm.test(\"Get Community id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set('commununityId', jsonData.data.CommunityId)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1d1e6c1b-c375-44d5-b705-e759a48b0087",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"Test Community 2\",\n        \"Address\":\"test address 2\",\n        \"Phone\":\"08093781185\",\n        \"Email\":\"\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "CreateCommunity-Invalid phone number field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3b183ba-564a-4601-9b83-f0a7599e810d",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "283c1abb-2565-4f1d-ae8f-a01ca5744d76",
										"exec": [
											"pm.test(\"Verify that Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify that type returns field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].type).to.eql(\"field\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Phone is invalid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].msg).to.eql(\"Phone is invalid\");\r",
											"});\r",
											"pm.test(\"Verify that path returns Phone\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].path).to.eql(\"Phone\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a0b489b1-0b31-494c-9ea8-2973aa832c15",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"{{$randomFirstName}}\",\n        \"Address\":\"{{$randomStreetAddress}}\",\n        \"Phone\":\"abcdefghi\",\n        \"Email\":\"{{$randomFirstName}}{{$randomLastName}}@yopmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "CreateCommunity Copy 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3b183ba-564a-4601-9b83-f0a7599e810d",
										"exec": [
											" const phoneNumber = Math.floor(Math.random() * 100000000);\r",
											"    // Format the number as a phone number with area code\r",
											"    const formattedPhoneNumber = \"080\" + phoneNumber.toString().padStart(8, '0');\r",
											"    console.log(formattedPhoneNumber);\r",
											"\r",
											"    pm.collectionVariables.set('phoneNumber', formattedPhoneNumber)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "283c1abb-2565-4f1d-ae8f-a01ca5744d76",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that response status returns success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Successfully created commununity\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully Created Community\");\r",
											"});\r",
											"pm.test(\"Verify that response name exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Name).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response Address exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Address).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response phone exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Phone).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that response Email exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.Email).to.exist;\r",
											"});\r",
											"pm.test(\"Get Community id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set('commununityId', jsonData.data.CommunityId)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "23dc2252-99a0-48bb-85ed-823083a39143",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"{{$randomFirstName}}\",\n        \"Address\":\"{{$randomStreetAddress}}\",\n        \"Phone\":\"{{phoneNumber}}\",\n        \"Email\":\"{{$randomFirstName}}{{$randomLastName}}@yopmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "CreateCommunity-No Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c367820b-0c10-468a-b41d-a862eaec2af6",
										"exec": [
											"pm.test(\"Verify that Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Request UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request UnAuthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d9820d54-eaad-494b-a34e-fe8c639d8b69",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"Test Community 2\",\n        \"Address\":\"test address 2\",\n        \"Phone\":\"08093781185\",\n        \"Email\":\"alexanderprofesssor@gmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						},
						{
							"name": "CreateCommunity-Invalid Auth token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4901a91-86c7-4c90-aaee-965977e3bb37",
										"exec": [
											"pm.test(\"Verify that Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Request UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request Forbidden, Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "81562f93-3b5f-4334-b5de-e6b8dfe26da7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6NDAsIkZpcnN0TmFtZSI6IkFiaW9kdW4iLCJMYXN0TmFtZSI3hp9sYW5peWkiLCJET0IiOiIxOTkzLTAxLTAxVDAwOjAwOjAwLjAwMFoiLCJHZW5kZXIiOiJNYWxlIiwiQWRkcmVzcyI6ImxhZ29zLE5pZ2VyaWEiLCJQaG9uZSI6IjA4MTQ1MDc1Nzg5IiwiRW1haWwiOm51bGwsIlBob3RvUGF0aCI6InRlc3RpbmcucG5nIiwiUGFzc3dvcmQiOiIkMmIkMTAkUmYuUDIueHpQb1BvTFkzdS56Z0NVLklXTUd0bDk3Nm1OZ28zSDZCbmlPQ21OS2pRYXJ2UksiLCJJc1ZlcmlmaWVkIjoxLCJMYW5ndWFnZSI6ImVuZ2xpc2giLCJDb21wYW55VHlwZSI6IkJhbmtpbmciLCJSZWZyZXNoVG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKa1lYUmhJam9pYW5WemRDQmhJSEpsWm5KbGMyZ2dkRzlyWlc0aUxDSnBZWFFpT2pFM01EWTNPRFEzT0RJc0ltVjRjQ0k2TVRjd056TTRPVFU0TW4wLllQWDhpSzFMb0RHSEpTSTB1MHM5WGpqcXBQdmVaS2RLbVdpeko1WVY2NU0iLCJpYXQiOjE3MDc1NDE2MTMsImV4cCI6MTcwNzU0NTIxM30.fYK2E9LIA0aRd6S9CPJtBqK3AOLx_ZnCSiRfHGEvsmE"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\n        \"Name\":\"Test Community 2\",\n        \"Address\":\"test address 2\",\n        \"Phone\":\"08093781185\",\n        \"Email\":\"alexanderprofesssor@gmail.com\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/create"
							},
							"response": []
						}
					],
					"id": "d64818e4-1875-4a18-a3e3-277fc32a99c2"
				},
				{
					"name": "GetAllCommunity",
					"item": [
						{
							"name": "GetAllCommunity-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f809f7f-dd7d-4ee5-936b-32a94aaef8d8",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Successfully fetched commununity \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully Fetched Community\");\r",
											"});\r",
											"pm.test(\"Get id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"Id\", jsonData.data[0].Id);\r",
											"});\r",
											"pm.test(\"Get Community id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"commununityId\", jsonData.data[0].CommunityId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e7239a83-6b23-46f9-abbc-fde9904e6d5d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community"
							},
							"response": []
						},
						{
							"name": "GetAllCommunity-No Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f881f48-3858-4fff-9715-478bf794edac",
										"exec": [
											"pm.test(\"Verify that Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Request UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request UnAuthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2c276559-02c7-456f-b090-4ff9dd3e9960",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community"
							},
							"response": []
						},
						{
							"name": "GetAllCommunity-Invalid Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad6804e3-84d8-4ba1-8377-e61d8b0a0527",
										"exec": [
											"pm.test(\"Verify that Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Invalid token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request Forbidden, Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "94b7641c-79fc-42ee-b6e0-f0252964203c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6NDAsIkZpcnN0TmFtZSI6IkFiaW9kdW4iLCJMYXN0TmFtZSI6Ik9sYfr5eWkiLCJET0IiOiIxOTkzLTAxLTAxVDAwOjAwOjAwLjAwMFoiLCJHZW5kZXIiOiJNYWxlIiwiQWRkcmVzcyI6ImxhZ29zLE5pZ2VyaWEiLCJQaG9uZSI6IjA4MTQ1MDc1Nzg5IiwiRW1haWwiOm51bGwsIlBob3RvUGF0aCI6InRlc3RpbmcucG5nIiwiUGFzc3dvcmQiOiIkMmIkMTAkUmYuUDIueHpQb1BvTFkzdS56Z0NVLklXTUd0bDk3Nm1OZ28zSDZCbmlPQ21OS2pRYXJ2UksiLCJJc1ZlcmlmaWVkIjoxLCJMYW5ndWFnZSI6ImVuZ2xpc2giLCJDb21wYW55VHlwZSI6IkJhbmtpbmciLCJSZWZyZXNoVG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKa1lYUmhJam9pYW5WemRDQmhJSEpsWm5KbGMyZ2dkRzlyWlc0aUxDSnBZWFFpT2pFM01EYzFORFExTWpjc0ltVjRjQ0k2TVRjd09ERTBPVE15TjMwLlY2cDBObjR5bG5zR1BEcTlsb2FzaGljRWdtb2xQSG5vaXRZd1MzXy1URFUiLCJpYXQiOjE3MDc1NDU0MzAsImV4cCI6MTcwNzU0OTAzMH0.2BAS726SNx1lBVSBUITkE7SWwbJhaLI-sU9qYrLDags"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community"
							},
							"response": []
						}
					],
					"id": "4f859c78-0d09-4f57-8662-88a0dbb50aee"
				},
				{
					"name": "GetCommunityById",
					"item": [
						{
							"name": "GetCommunityById-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c3fec91-4075-4fbf-a5de-a0d0d1fc816e",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Successfully fetched commununity\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully Fetched Community\");\r",
											"});\r",
											"pm.test(\"Verify that response data exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.exist;\r",
											"});\r",
											"pm.test(\"Verify that commununity id returned is correct\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.CommunityId).to.eql(pm.collectionVariables.get('commununityId'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "14f5e413-5a96-4d65-9149-27dc7dcfc733",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/{{commununityId}}"
							},
							"response": []
						},
						{
							"name": "GetCommunityById-No Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6619a738-20a0-4327-8d5f-368aa6dec81f",
										"exec": [
											"pm.test(\"Verify that Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Request UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request UnAuthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "283992c3-18ed-4426-96b0-77235eb8c982",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/717fae8c-190e-440e-9d8f-82fe4cbd734e"
							},
							"response": []
						},
						{
							"name": "GetCommunityById-Invalid Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87b43ac2-6603-4014-adc4-f202b7876013",
										"exec": [
											"pm.test(\"Verify that Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Invalid token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request Forbidden, Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "598c7e1d-010e-4145-9b81-e5c5570d11fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6NDAsIkZpcnN0TmFtZSI6IkFiaW9kdW4iLCJMYXN0TmFtZSI6Ik9sYW5peWkiLCJET0IiOiIxOTkzLTAxGHCxVDAwOjAwOjAwLjAwMFoiLCJHZW5kZXIiOiJNYWxlIiwiQWRkcmVzcyI6ImxhZ29zLE5pZ2VyaWEiLCJQaG9uZSI6IjA4MTQ1MDc1Nzg5IiwiRW1haWwiOm51bGwsIlBob3RvUGF0aCI6InRlc3RpbmcucG5nIiwiUGFzc3dvcmQiOiIkMmIkMTAkUmYuUDIueHpQb1BvTFkzdS56Z0NVLklXTUd0bDk3Nm1OZ28zSDZCbmlPQ21OS2pRYXJ2UksiLCJJc1ZlcmlmaWVkIjoxLCJMYW5ndWFnZSI6ImVuZ2xpc2giLCJDb21wYW55VHlwZSI6IkJhbmtpbmciLCJSZWZyZXNoVG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKa1lYUmhJam9pYW5WemRDQmhJSEpsWm5KbGMyZ2dkRzlyWlc0aUxDSnBZWFFpT2pFM01EYzFORGd4TmpNc0ltVjRjQ0k2TVRjd09ERTFNamsyTTMwLnRJQXlxX25ZaWZ6dmxsQW9MakFhZHJoWXktb1dSdll0SWJ6czJNVWR1aVkiLCJpYXQiOjE3MDc1Njk0MTMsImV4cCI6MTcwNzU3MzAxM30.jH9HWOJdF87w_zqUZZZvgaQeb_D8DAAtxiNSDGrTdYM"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/717fae8c-190e-440e-9d8f-82fe4cbd734e"
							},
							"response": []
						}
					],
					"id": "e9ec08ad-dc39-4792-909a-69ff1633003b"
				},
				{
					"name": "createSubAdmin",
					"item": [
						{
							"name": "createSubAdmin-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31ec3538-800c-4045-b0f5-8f310e0cd0d6",
										"exec": [
											"pm.test(\"Verify that Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Successfully created commununity\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully Created Community\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7835db3d-1512-4a94-ad86-819de9fc51f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"FirstName\":\"{{$randomFirstName}}\",\n\"LastName\":\"{{$randomLastName}}\",\n\"Phone\":\"08093781186\",\n\"Email\":\"{{$randomFirstName}}{{$randomLastName}}@gmail.com\",\n\"PhotoPath\":\"testpath\",\n\"CommunityId\":\"{{commununityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/subAdmin/create"
							},
							"response": []
						},
						{
							"name": "createSubAdmin-Empty First name field",
							"id": "f6b2fe75-6e64-4c3b-aa37-4660543a1562",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"FirstName\":\"\",\n\"LastName\":\"test name2\",\n\"Phone\":\"08093781185\",\n\"Email\":\"alexanderprofesssor@gmail.com\",\n\"PhotoPath\":\"testpath\",\n\"CommunityId\":\"717fae8c-190e-440e-9d8f-82fe4cbd734e\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/subAdmin/create"
							},
							"response": []
						},
						{
							"name": "createSubAdmin-Empty last name field",
							"id": "2990ad3b-aa53-4545-a930-35e2b54e2eae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"FirstName\":\"tetst name1\",\n\"LastName\":\"\",\n\"Phone\":\"08093781185\",\n\"Email\":\"alexanderprofesssor@gmail.com\",\n\"PhotoPath\":\"testpath\",\n\"CommunityId\":\"717fae8c-190e-440e-9d8f-82fe4cbd734e\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/subAdmin/create"
							},
							"response": []
						},
						{
							"name": "createSubAdmin-Empty phone number field",
							"id": "9aef5d53-1fac-4843-9c11-ec5c2aefd7ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"FirstName\":\"tetst name1\",\n\"LastName\":\"test name2\",\n\"Phone\":\"\",\n\"Email\":\"alexanderprofesssor@gmail.com\",\n\"PhotoPath\":\"testpath\",\n\"CommunityId\":\"717fae8c-190e-440e-9d8f-82fe4cbd734e\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/subAdmin/create"
							},
							"response": []
						},
						{
							"name": "createSubAdmin Copy 4",
							"id": "8a6496da-7f56-42fa-94f0-d7009599475a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"FirstName\":\"tetst name1\",\n\"LastName\":\"test name2\",\n\"Phone\":\"08093781185\",\n\"Email\":\"alexanderprofesssor@gmail.com\",\n\"PhotoPath\":\"testpath\",\n\"CommunityId\":\"717fae8c-190e-440e-9d8f-82fe4cbd734e\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/subAdmin/create"
							},
							"response": []
						}
					],
					"id": "dc25c086-08e9-4c42-9ee8-992545e10a13"
				},
				{
					"name": "GetAllSubAdmin",
					"item": [
						{
							"name": "GetAllSubAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2a3c0f4-150a-4e5f-85f4-9f1e73eac546",
										"exec": [
											"pm.test(\"Verify that status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify that status returns success \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Verify that message returns Successfully fetch subadmin\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successfully fetch subAdmin\");\r",
											"});\r",
											"pm.test(\"Verify that data exist\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aa0ee8c4-9ee3-4d5c-80e9-17a3570d7cb1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/subAdmins/all"
							},
							"response": []
						},
						{
							"name": "GetAllSubAdmin-No Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d99f822c-81d9-4205-b807-c6b87de0d6fb",
										"exec": [
											"pm.test(\"Verify that Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Request UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request UnAuthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d5dbcb90-d565-45b7-8009-514f09251e5b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/subAdmins/all"
							},
							"response": []
						},
						{
							"name": "GetAllSubAdmin-Invalid Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a97e9d2-14cc-4ea4-8795-4e7a7ecd0234",
										"exec": [
											"pm.test(\"Verify that Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Invalid token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request Forbidden, Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a10bac29-d389-423a-9220-e52343f17c42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6NDAsIkZpcnN0TmFtZSI6IkFiaW9kdW4iLMJCYXN0TmFtZSI6Ik9sYW5peWkiLCJET0IiOiIxOTkzLTAxLTAxVDAwOjAwOjAwLjAwMFoiLCJHZW5kZXIiOiJNYWxlIiwiQWRkcmVzcyI6ImxhZ29zLE5pZ2VyaWEiLCJQaG9uZSI6IjA4MTQ1MDc1Nzg5IiwiRW1haWwiOm51bGwsIlBob3RvUGF0aCI6InRlc3RpbmcucG5nIiwiUGFzc3dvcmQiOiIkMmIkMTAkUmYuUDIueHpQb1BvTFkzdS56Z0NVLklXTUd0bDk3Nm1OZ28zSDZCbmlPQ21OS2pRYXJ2UksiLCJJc1ZlcmlmaWVkIjoxLCJMYW5ndWFnZSI6ImVuZ2xpc2giLCJDb21wYW55VHlwZSI6IkJhbmtpbmciLCJSZWZyZXNoVG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKa1lYUmhJam9pYW5WemRDQmhJSEpsWm5KbGMyZ2dkRzlyWlc0aUxDSnBZWFFpT2pFM01EYzFOekExT1RNc0ltVjRjQ0k2TVRjd09ERTNOVE01TTMwLlAtS2FEc0hiR3JEMW01SlNkQVNjd1pEaTVtM09ub0NjcTYzbWxqblJEa1UiLCJpYXQiOjE3MDc2NDI4NjYsImV4cCI6MTcwNzY0NjQ2Nn0.HDgc52JkbxfvVgLT2nTjoHuOZZL7pUmu0EjKtt6l41o"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/subAdmins/all"
							},
							"response": []
						}
					],
					"id": "a2bc8ff6-c1d2-4d9c-800f-4d81e07b529c"
				},
				{
					"name": "GetSubAdminById",
					"item": [
						{
							"name": "GetSubAdminById-Successful",
							"id": "52129da3-5d3d-4b36-b2ae-1b283507a448",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/subAdmins/1"
							},
							"response": []
						},
						{
							"name": "GetSubAdminById-No Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da78a3a5-d8e0-48b7-baa6-996344273962",
										"exec": [
											"pm.test(\"Verify that Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message is Request UnAuthorized\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request UnAuthorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fd655b6d-3b8d-4677-bea8-b822e709039e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/subAdmins/1"
							},
							"response": []
						},
						{
							"name": "GetSubAdminById-Invalid Auth Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ec708aa-316a-4434-b053-49002cdf42e6",
										"exec": [
											"pm.test(\"Verify that Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Verify that status is failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"pm.test(\"Verify that response message returns Invalid token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Request Forbidden, Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d5413b0d-1c98-4cb7-a1b7-176ed4c4c7cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6NDAsIkZpcnN0TmFtZSI6IkFiaW9kdW4iLMJCYXN0TmFtZSI6Ik9sYW5peWkiLCJET0IiOiIxOTkzLTAxLTAxVDAwOjAwOjAwLjAwMFoiLCJHZW5kZXIiOiJNYWxlIiwiQWRkcmVzcyI6ImxhZ29zLE5pZ2VyaWEiLCJQaG9uZSI6IjA4MTQ1MDc1Nzg5IiwiRW1haWwiOm51bGwsIlBob3RvUGF0aCI6InRlc3RpbmcucG5nIiwiUGFzc3dvcmQiOiIkMmIkMTAkUmYuUDIueHpQb1BvTFkzdS56Z0NVLklXTUd0bDk3Nm1OZ28zSDZCbmlPQ21OS2pRYXJ2UksiLCJJc1ZlcmlmaWVkIjoxLCJMYW5ndWFnZSI6ImVuZ2xpc2giLCJDb21wYW55VHlwZSI6IkJhbmtpbmciLCJSZWZyZXNoVG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKa1lYUmhJam9pYW5WemRDQmhJSEpsWm5KbGMyZ2dkRzlyWlc0aUxDSnBZWFFpT2pFM01EYzFOekExT1RNc0ltVjRjQ0k2TVRjd09ERTNOVE01TTMwLlAtS2FEc0hiR3JEMW01SlNkQVNjd1pEaTVtM09ub0NjcTYzbWxqblJEa1UiLCJpYXQiOjE3MDc2NDI4NjYsImV4cCI6MTcwNzY0NjQ2Nn0.HDgc52JkbxfvVgLT2nTjoHuOZZL7pUmu0EjKtt6l41o"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/subAdmins/1"
							},
							"response": []
						}
					],
					"id": "cc53c12a-bc95-4f55-ac26-d6a120de99d0"
				},
				{
					"name": "GetSubAdminByCommmunityId",
					"item": [
						{
							"name": "GetSubAdminByCommmunityId",
							"id": "b4a090b9-5515-4d7a-8087-959c625beaa8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Auth_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/api/community/subAdmins/:communityId",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"api",
										"community",
										"subAdmins",
										":communityId"
									],
									"variable": [
										{
											"key": "communityId",
											"value": "{{commununityId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetSubAdminByCommmunityId Copy",
							"id": "ef7dcb79-245e-4e11-847f-bb20117b8831",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/api/community/subAdmins/:communityId",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"api",
										"community",
										"subAdmins",
										":communityId"
									],
									"variable": [
										{
											"id": "ba21b5fc-5614-46c4-a944-f72ae37e3f91",
											"key": "communityId",
											"value": "717fae8c-190e-440e-9d8f-82fe4cbd734e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetSubAdminByCommmunityId Copy 2",
							"id": "d9499014-b7cb-4d20-aad4-c037bae9e0d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/api/community/subAdmins/:communityId",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"api",
										"community",
										"subAdmins",
										":communityId"
									],
									"variable": [
										{
											"id": "ba21b5fc-5614-46c4-a944-f72ae37e3f91",
											"key": "communityId",
											"value": "717fae8c-190e-440e-9d8f-82fe4cbd734e"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "69918b87-4c79-4372-bcfd-4f8aa7545807"
				},
				{
					"name": "GetCheckersById",
					"item": [
						{
							"name": "GetCheckersById",
							"id": "2640a6bd-7b44-4ba0-ac81-2b8bb31816c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/checkers/1"
							},
							"response": []
						}
					],
					"id": "7775ff81-aa36-4263-9a13-5276623e1c3d"
				},
				{
					"name": "GetAllcheckers",
					"item": [
						{
							"name": "GetAllcheckers",
							"id": "92dfcffb-8aef-4135-927a-90d3ea82ef88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{BaseUrl}}/api/community/checkers/all"
							},
							"response": []
						}
					],
					"id": "9e94a14a-e559-4249-bd5f-83a4b8393e80"
				},
				{
					"name": "Createcheckers",
					"item": [
						{
							"name": "Createcheckers",
							"id": "d438592c-1b25-4d20-9604-77cacd1a8e2d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\n    {\n        \"FirstName\":\"Checker1 firstname\",\n        \"LastName\":\"Checker1 LastName\",\n        \"Phone\":\"08057231914\",\n        \"Email\":\"abiodun@ggmail.com\",\n        \"DOB\":\"1991-01-01\",\n        \"Gender\":\"Male\",\n        \"NIN\":\"23454323456\",\n        \"CommunityId\":\"717fae8c-190e-440e-9d8f-82fe4cbd734e\",\n        \"CheckPoint\":\"test CheckPoint\"\n\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/api/community/checkers/create"
							},
							"response": []
						}
					],
					"id": "06aefc30-e8a9-43e1-be39-fcb46e3c070f"
				},
				{
					"name": "New Folder",
					"item": [
						{
							"name": "CreateBulkCheckersWithExcel Copy",
							"id": "26bf2a0b-ef33-44fd-942b-416eadcd7d37",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "WHS1BEVfk/CheckerUpload.xlsx"
										}
									]
								},
								"url": "{{BaseUrl}}/api/community/checkers/createXls"
							},
							"response": []
						}
					],
					"id": "7a9e5045-f64e-4075-841a-dc4d77ead28d"
				},
				{
					"name": "New Folder Copy",
					"item": [
						{
							"name": "GetCheckerByCommunityId Copy",
							"id": "5c7ad576-0555-41ff-9886-5565040e827c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/api/community/checkers/:communityId",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"api",
										"community",
										"checkers",
										":communityId"
									],
									"variable": [
										{
											"id": "3ddc46e0-ee46-4f5e-8ce7-b9a71c5802c8",
											"key": "communityId",
											"value": "717fae8c-190e-440e-9d8f-82fe4cbd734e"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "8d7db36d-a101-4533-abdd-66f6af37f66a"
				}
			],
			"id": "9f42db7e-301f-446f-9277-a402da869eb5"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4725bbf8-091f-4c66-b860-cc58f9407513",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ca8af606-72b3-468f-9a31-dd4c15ee52de",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "localhost:3000",
			"type": "string",
			"disabled": true
		},
		{
			"key": "accessToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6MjUsIkZpcnN0TmFtZSI6IkFsZXhhbmRlciIsIkxhc3ROYW1lIjoiQWppYm9zZSIsIkRPQiI6IjE5OTItMTItMzFUMjM6MDA6MDAuMDAwWiIsIkdlbmRlciI6Ik1hbGUiLCJBZGRyZXNzIjoibGFnb3MsTmlnZXJpYSIsIlBob25lIjoiMDgwNTcyMzE5MTQiLCJFbWFpbCI6ImFiaW9kdW5AZ21haWwuY29tIiwiUGhvdG9QYXRoIjoidGV0c3RwaG90byIsIlBhc3N3b3JkIjoiJDJiJDEwJFYvRS5YekFnaERZRXZLdnAvQmE3V3VHMjRZM21BQWN1dnliVEtEWnZQcXpvT3FESmR0VjBLIiwiVmVyaWZ5Q2hhbm5lbCI6ImVtYWlsIiwiSXNWZXJpZmllZCI6MSwiTGFuZ3VhZ2UiOiJlbmdsaXNoIiwiQ29tcGFueVR5cGUiOiJCYW5raW5nIiwiUmVmcmVzaFRva2VuIjoiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmtZWFJoSWpvaWFuVnpkQ0JoSUhKbFpuSmxjMmdnZEc5clpXNGlMQ0pwWVhRaU9qRTNNRFUzTnpRMU1UUXNJbVY0Y0NJNk1UY3dOak0zT1RNeE5IMC42YmNNNTVESXJNUjdVbDZFZXhxUHlobHRKYjFiZ1Y0UjdKaWJRajZ1YW1ZIiwiaWF0IjoxNzA1Nzc0OTM1LCJleHAiOjE3MDU3Nzg1MzV9.B4t-0BcLvo2H-pG8MJcQdWS6lc1L57dwayRC5YodNHY",
			"type": "string",
			"disabled": true
		},
		{
			"key": "Id",
			"value": ""
		},
		{
			"key": "commununityId",
			"value": ""
		},
		{
			"key": "phoneNumber",
			"value": ""
		},
		{
			"key": "DOB",
			"value": ""
		}
	]
}