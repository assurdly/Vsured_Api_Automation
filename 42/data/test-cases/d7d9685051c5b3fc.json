{"uid":"d7d9685051c5b3fc","name":"Register- Empty Address Field","fullName":"Auth/Register#Register- Empty Address Field","historyId":"092a0c54-bc31-42b3-a2f9-a38df764aeb8","time":{"start":1707643906759,"stop":1707643936983,"duration":30224},"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that message returns Address is required, Verify that path returns Address","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that message returns Address is required, Verify that path returns Address","steps":[{"name":"Verify that Status code is 400","time":{"start":1707643936978,"stop":1707643936978,"duration":0},"status":"failed","statusMessage":"expected response to have status code 400 but got 503","statusTrace":"Error: expected response to have status code 400 but got 503\n    at eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:5:25)\n    at e.test (evalmachine.<anonymous>:66:10289)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:4:4)\n    at u.exec (evalmachine.<anonymous>:66:1816851)\n    at t.exports (evalmachine.<anonymous>:66:5826)\n    at Object.<anonymous> (evalmachine.<anonymous>:66:8141)\n    at evalmachine.<anonymous>:15:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:14:59)\n    at evalmachine.<anonymous>:59:24","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that type returns field","time":{"start":1707643936979,"stop":1707643936979,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that message returns Address is required","time":{"start":1707643936980,"stop":1707643936980,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that path returns Address","time":{"start":1707643936980,"stop":1707643936980,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"fc2257d699367552","name":"Request Headers","source":"fc2257d699367552.json","type":"application/json","size":354},{"uid":"a99243079f2b35ab","name":"Request Body","source":"a99243079f2b35ab.txt","type":"text/plain","size":324},{"uid":"9c8baf7138547df8","name":"Response Headers","source":"9c8baf7138547df8.json","type":"application/json","size":782},{"uid":"a1f5f4e6c01a162e","name":"Response Body","source":"a1f5f4e6c01a162e.txt","type":"text/plain","size":506}],"parameters":[],"stepsCount":4,"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"Auth"},{"name":"suite","value":"Register"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register"},{"name":"Response Code","value":"503"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d7d9685051c5b3fc.json","parameterValues":["POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register","503"]}