{"uid":"273070522a3120c","name":"RefreshToken- Empty channel field","fullName":"Auth/Refresh Token#RefreshToken- Empty channel field","historyId":"d97384d8-a363-4272-827b-499d0e34b528","time":{"start":1708323646400,"stop":1708323646590,"duration":190},"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that message includes Channel is required, Verify that path returns Channel","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that message includes Channel is required, Verify that path returns Channel","steps":[{"name":"Verify that Status code is 400","time":{"start":1708323646586,"stop":1708323646586,"duration":0},"status":"failed","statusMessage":"expected response to have status code 400 but got 503","statusTrace":"Error: expected response to have status code 400 but got 503\n    at eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:5:25)\n    at e.test (evalmachine.<anonymous>:66:10289)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:4:4)\n    at u.exec (evalmachine.<anonymous>:66:1816851)\n    at t.exports (evalmachine.<anonymous>:66:5826)\n    at Object.<anonymous> (evalmachine.<anonymous>:66:8141)\n    at evalmachine.<anonymous>:15:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:14:59)\n    at evalmachine.<anonymous>:59:24","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that type returns field","time":{"start":1708323646587,"stop":1708323646587,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that message includes Channel is required","time":{"start":1708323646587,"stop":1708323646587,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that path returns Channel","time":{"start":1708323646588,"stop":1708323646588,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3e66daf988ea6ddf","name":"Request Headers","source":"3e66daf988ea6ddf.json","type":"application/json","size":399},{"uid":"abb02bd3e1e461f9","name":"Request Body","source":"abb02bd3e1e461f9.txt","type":"text/plain","size":60},{"uid":"5144d9a47c8a9320","name":"Response Headers","source":"5144d9a47c8a9320.json","type":"application/json","size":782},{"uid":"16b7c8ffd0362bc6","name":"Response Body","source":"16b7c8ffd0362bc6.txt","type":"text/plain","size":506}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"Auth"},{"name":"suite","value":"Refresh Token"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/refreshToken"},{"name":"Response Code","value":"503"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"273070522a3120c.json","parameterValues":["POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/refreshToken","503"]}