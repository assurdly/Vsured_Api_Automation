{"uid":"73e3921f7061fb6","name":"Register- Empty Email Address","fullName":"Auth/Register#Register- Empty Email Address","historyId":"db2fabf0-e9d7-4fe8-b9b5-2a3b7112cacb","time":{"start":1706716279023,"stop":1706716309095,"duration":30072},"status":"failed","statusMessage":"Verify that Status code is 200, Verify that status returns Success, Verify that message returns Successfully registered user, Verify that data exist","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Verify that Status code is 200, Verify that status returns Success, Verify that message returns Successfully registered user, Verify that data exist","steps":[{"name":"Verify that Status code is 200","time":{"start":1706716309090,"stop":1706716309090,"duration":0},"status":"failed","statusMessage":"expected response to have status code 200 but got 503","statusTrace":"Error: expected response to have status code 200 but got 503\n    at eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:5:25)\n    at e.test (evalmachine.<anonymous>:66:10289)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:4:4)\n    at u.exec (evalmachine.<anonymous>:66:1816851)\n    at t.exports (evalmachine.<anonymous>:66:5826)\n    at Object.<anonymous> (evalmachine.<anonymous>:66:8141)\n    at evalmachine.<anonymous>:15:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:14:59)\n    at evalmachine.<anonymous>:59:24","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that status returns Success","time":{"start":1706716309091,"stop":1706716309091,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that message returns Successfully registered user","time":{"start":1706716309092,"stop":1706716309092,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that data exist","time":{"start":1706716309093,"stop":1706716309093,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"cd2ba772e911bd7","name":"Request Headers","source":"cd2ba772e911bd7.json","type":"application/json","size":354},{"uid":"f73915ac8cb37d41","name":"Request Body","source":"f73915ac8cb37d41.txt","type":"text/plain","size":319},{"uid":"17a367348541672b","name":"Response Headers","source":"17a367348541672b.json","type":"application/json","size":782},{"uid":"4d732448dfb90e6f","name":"Response Body","source":"4d732448dfb90e6f.txt","type":"text/plain","size":506}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"Auth"},{"name":"suite","value":"Register"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register"},{"name":"Response Code","value":"503"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"73e3921f7061fb6.json","parameterValues":["POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register","503"]}