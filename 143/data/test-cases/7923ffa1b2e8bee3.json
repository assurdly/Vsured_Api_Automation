{"uid":"7923ffa1b2e8bee3","name":"Register-Empty Address Field","fullName":"Auth/Register#Register-Empty Address Field","historyId":"948992c9-99f8-4913-9750-6a1b26786908","time":{"start":1708205877124,"stop":1708205877395,"duration":271},"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that message returns Address is required, Verify that path returns Address","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that message returns Address is required, Verify that path returns Address","steps":[{"name":"Verify that Status code is 400","time":{"start":1708205877389,"stop":1708205877389,"duration":0},"status":"failed","statusMessage":"expected response to have status code 400 but got 503","statusTrace":"Error: expected response to have status code 400 but got 503\n    at eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:5:25)\n    at e.test (evalmachine.<anonymous>:66:10289)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:4:4)\n    at u.exec (evalmachine.<anonymous>:66:1816851)\n    at t.exports (evalmachine.<anonymous>:66:5826)\n    at Object.<anonymous> (evalmachine.<anonymous>:66:8141)\n    at evalmachine.<anonymous>:15:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:14:59)\n    at evalmachine.<anonymous>:59:24","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0},{"name":"Verify that type returns field","time":{"start":1708205877390,"stop":1708205877390,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0},{"name":"Verify that message returns Address is required","time":{"start":1708205877391,"stop":1708205877391,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0},{"name":"Verify that path returns Address","time":{"start":1708205877392,"stop":1708205877392,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0}],"attachments":[{"uid":"ca14b63530b0485b","name":"ConsoleLogs","source":"ca14b63530b0485b.txt","type":"text/plain","size":162},{"uid":"2808edadbfd376a3","name":"Request Headers","source":"2808edadbfd376a3.json","type":"application/json","size":315},{"uid":"a2ed5809a088b8a0","name":"Response Headers","source":"a2ed5809a088b8a0.json","type":"application/json","size":782},{"uid":"a76c9acf1e548316","name":"Response Body","source":"a76c9acf1e548316.txt","type":"text/plain","size":506}],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":4},"afterStages":[],"labels":[{"name":"parentSuite","value":"Auth"},{"name":"suite","value":"Register"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register"},{"name":"Response Code","value":"503"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7923ffa1b2e8bee3.json","parameterValues":["POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register","503"]}