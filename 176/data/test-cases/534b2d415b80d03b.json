{"uid":"534b2d415b80d03b","name":"Registeration Verification- Empty Token field","fullName":"Auth/Registration Verification#Registeration Verification- Empty Token field","historyId":"8eebcdda-fe88-42df-9d93-a30a7f683ad5","time":{"start":1709133731646,"stop":1709133731893,"duration":247},"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that response message returns Token is required, Verify that path returns Token","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Verify that Status code is 400, Verify that type returns field, Verify that response message returns Token is required, Verify that path returns Token","steps":[{"name":"Verify that Status code is 400","time":{"start":1709133731890,"stop":1709133731890,"duration":0},"status":"failed","statusMessage":"expected response to have status code 400 but got 503","statusTrace":"Error: expected response to have status code 400 but got 503\n    at eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:5:25)\n    at e.test (evalmachine.<anonymous>:66:10289)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:66:1816816), <anonymous>:4:4)\n    at u.exec (evalmachine.<anonymous>:66:1816851)\n    at t.exports (evalmachine.<anonymous>:66:5826)\n    at Object.<anonymous> (evalmachine.<anonymous>:66:8141)\n    at evalmachine.<anonymous>:15:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:14:59)\n    at evalmachine.<anonymous>:59:24","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that type returns field","time":{"start":1709133731890,"stop":1709133731890,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that response message returns Token is required","time":{"start":1709133731891,"stop":1709133731891,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that path returns Token","time":{"start":1709133731891,"stop":1709133731891,"duration":0},"status":"failed","statusMessage":"Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"de28ae2338e3562a","name":"Request Headers","source":"de28ae2338e3562a.json","type":"application/json","size":400},{"uid":"d5fe33b8aee098c4","name":"Request Body","source":"d5fe33b8aee098c4.txt","type":"text/plain","size":47},{"uid":"a88e485fea0484cc","name":"Response Headers","source":"a88e485fea0484cc.json","type":"application/json","size":782},{"uid":"a60b105f54af2aa1","name":"Response Body","source":"a60b105f54af2aa1.txt","type":"text/plain","size":506}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"Auth"},{"name":"suite","value":"Registration Verification"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register/verify"},{"name":"Response Code","value":"503"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"534b2d415b80d03b.json","parameterValues":["POST - https://vsured-4c2a3d0f8868.herokuapp.com/api/register/verify","503"]}